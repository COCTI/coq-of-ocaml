(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Module Source.
  Record signature {t : Set} : Set := {
    t := t;
    x : t;
  }.
End Source.

Module Target.
  Record signature {t : Set} : Set := {
    t := t;
    y : t;
  }.
End Target.

Definition M : {t : Set & Source.signature (t := t)} :=
  let t : Set := int in
  let x := 12 in
  existT (A := Set) _ t
    {|
      Source.x := x
    |}.

Definition F :=
  fun (X : {t : Set & Source.signature (t := t)}) =>
    ((let t : Set := (|X|).(Source.t) in
    let y := (|X|).(Source.x) in
    existT (A := unit) (fun _ => _) tt
      {|
        Target.y := y
      |}) : {_ : unit & Target.signature (t := (|X|).(Source.t))}).

Definition FSubst :=
  fun (X : {t : Set & Source.signature (t := t)}) =>
    ((let y := (|X|).(Source.x) in
    existT (A := unit) (fun _ => _) tt
      {|
        Target.y := y
      |}) : {_ : unit & Target.signature (t := (|X|).(Source.t))}).

Definition Sum :=
  fun (X : {_ : unit & Source.signature (t := int)}) =>
    fun (Y : {_ : unit & Source.signature (t := int)}) =>
      ((let t : Set := int in
      let y := Z.add (|X|).(Source.x) (|Y|).(Source.x) in
      existT (A := Set) _ t
        {|
          Target.y := y
        |}) : {t : Set & Target.signature (t := t)}).

Module WithM.
  Definition t := (|M|).(Source.t).
  
  Definition x := (|M|).(Source.x).
  
  Definition z : int := 0.
End WithM.

Module WithSum.
  Definition F_include := F (existT (A := Set) _ _ (|M|)).
  
  Definition t := (|F_include|).(Target.t).
  
  Definition y := (|F_include|).(Target.y).
  
  Definition z : int := 0.
End WithSum.

Definition GenFun :=
  fun (_ : unit) =>
    ((let t : Set := int in
    let y := 23 in
    existT (A := Set) _ t
      {|
        Target.y := y
      |}) : {t : Set & Target.signature (t := t)}).

Definition AppliedGenFun := GenFun tt.
